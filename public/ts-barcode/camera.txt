const codeReader = new BrowserMultiFormatReader();
let active = true;

const getCameraStream = async () => {
    try {
        console.log('Requesting camera access...');

        const constraints = {
            audio: false,
            video: {
                facingMode: {ideal: 'environment'},
                width: {min: 640, ideal: 1280, max: 1920},
                height: {min: 480, ideal: 720, max: 1080},
                frameRate: {ideal: 30}
            }
        };

        let videoStream;
        try {
            videoStream = await navigator.mediaDevices.getUserMedia(constraints);
        } catch (idealError) {
            console.log('Ideal constraints failed, trying more relaxed constraints');
            videoStream = await navigator.mediaDevices.getUserMedia({
                audio: false,
                video: {
                    facingMode: 'environment',
                    width: {min: 320, ideal: 640},
                    height: {min: 240, ideal: 480}
                }
            });
        }

        console.log('Camera stream obtained:', videoStream);
        setHasPermission(true);

        if (videoRef.current) {
            videoRef.current.srcObject = videoStream;

            codeReader.decodeFromVideoDevice(null, videoRef.current, (result, err) => {
                if (active && result) {
                    console.log('Barcode detected:', result.getText());
                    setBarcode(result.getText());
                }
            });
        }
    } catch (e: any) {
        console.error('Camera access failed:', e.name, e.message);
        setError(`Camera access failed: ${e.name} â€“ ${e.message}`);

        if (e.name === 'NotAllowedError') {
            setError('Please allow camera access in your browser settings');
        } else if (e.name === 'NotFoundError' || e.name === 'OverconstrainedError') {
            setError('No suitable camera found. Please try with a different device.');
        } else {
            setError('Failed to access camera: ' + e.message);
        }
    }
};